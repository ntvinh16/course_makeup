CREATE TABLE USERS
(
    USER_ID   UUID PRIMARY KEY NOT NULL,
    USERNAME  VARCHAR(50)      NOT NULL,
    EMAIL     VARCHAR(100)     NOT NULL,
    PASSWORD  VARCHAR(100)      NOT NULL,
    FULL_NAME VARCHAR(60)      NOT NULL,
    BIRTHDAY  DATE,
    CREATE_AT DATE
);

CREATE TABLE ROLES
(
    ROLE_ID     UUID PRIMARY KEY NOT NULL,
    NAME        VARCHAR(20)      NOT NULL UNIQUE,
    DESCRIPTION TEXT
);

CREATE TABLE PERMISSIONS
(
    PERMISSION_ID UUID PRIMARY KEY NOT NULL,
    NAME          VARCHAR(50)      NOT NULL UNIQUE
);

CREATE TABLE COURSES
(
    COURSE_ID      UUID PRIMARY KEY NOT NULL,
    TITLE          VARCHAR(255)     NOT NULL,
    DESCRIPTION    VARCHAR(255)     NOT NULL,
    CATEGORY       VARCHAR(255)     NOT NULL,
    PRICE          DECIMAL          NOT NULL,
    PRICE_SALE     DECIMAL,
    MAIN_VIDEO_URL TEXT,
    DEMO_VIDEO_URL TEXT,
    IMAGE_URL      TEXT,
    IS_FREE        BOOLEAN,
    CREATE_AT      DATE,
    UPDATE_AT      DATE
);

CREATE TABLE CATEGORIES
(
    CATEGORY_ID UUID PRIMARY KEY NOT NULL,
    NAME        VARCHAR(20)      NOT NULL UNIQUE,
    DESCRIPTION TEXT
);

CREATE TABLE INVALIDATED_TOKENS
(
    TOKEN_ID    UUID PRIMARY KEY NOT NULL,
    EXPIRY_TIME DATE
);

CREATE TABLE COURSE_CATEGORIES
(
    PRIMARY KEY (COURSE_ID, CATEGORY_ID),
    COURSE_ID   UUID NOT NULL,
    CATEGORY_ID UUID NOT NULL,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES (COURSE_ID),
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (CATEGORY_ID)
);

CREATE TABLE BLOG_POSTS
(
    POST_ID   UUID PRIMARY KEY NOT NULL,
    USER_ID   UUID             NOT NULL,
    TITLE     VARCHAR(255)     NOT NULL,
    CONTENT   TEXT             NOT NULL,
    CREATE_AT DATE,
    UPDATE_AT DATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE BLOG_COMMENTS
(
    COMMENT_ID UUID PRIMARY KEY NOT NULL,
    POST_ID    UUID             NOT NULL,
    USER_ID    UUID             NOT NULL,
    COMMENT    TEXT             NOT NULL,
    FOREIGN KEY (POST_ID) REFERENCES BLOG_POSTS (POST_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

CREATE TABLE ENROLLMENTS
(
    ENROLLMENT_ID    UUID PRIMARY KEY NOT NULL,
    USER_ID          UUID             NOT NULL,
    COURSE_ID        UUID             NOT NULL,
    PURCHASE_DATE    DATE             NOT NULL,
    PRICE_ENROLLMENT DECIMAL          NOT NULL,
    STATUS           INTEGER,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES (COURSE_ID)
);

CREATE TABLE PAYMENTS
(
    PAYMENT_ID     UUID PRIMARY KEY NOT NULL,
    USER_ID        UUID             NOT NULL,
    COURSE_ID      UUID             NOT NULL,
    ENROLLMENT_ID  UUID             NOT NULL,
    PAYMENT_DATE   DATE             NOT NULL,
    PAYMENT_PRICE  DECIMAL          NOT NULL,
    STATUS         INTEGER,
    TRANSACTION_ID VARCHAR(255)     NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES (COURSE_ID),
    FOREIGN KEY (ENROLLMENT_ID) REFERENCES ENROLLMENTS (ENROLLMENT_ID)
);

CREATE TABLE COURSE_REVIEWS
(
    REVIEW_ID   UUID PRIMARY KEY NOT NULL,
    USER_ID     UUID             NOT NULL,
    COURSE_ID   UUID             NOT NULL,
    REVIEW_DATE DATE             NOT NULL,
    RATING      INTEGER,
    COMMENT     TEXT,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES (COURSE_ID)
);

CREATE TABLE USER_ROLES
(
    PRIMARY KEY (USER_ID, ROLE_ID),
    USER_ID UUID NOT NULL,
    ROLE_ID UUID NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ROLE_ID)
);

CREATE TABLE ROLE_PERMISSIONS
(
    PRIMARY KEY (ROLE_ID, PERMISSION_ID),
    ROLE_ID       UUID NOT NULL,
    PERMISSION_ID UUID NOT NULL,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ROLE_ID),
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS (PERMISSION_ID)
);

CREATE TABLE EMAIL_NOTIFICATIONS
(
    NOTIFICATION_ID UUID PRIMARY KEY NOT NULL,
    USER_ID         UUID             NOT NULL,
    COURSE_ID       UUID             NOT NULL,
    PAYMENT_ID      UUID             NOT NULL,
    EMAIL           VARCHAR(100)     NOT NULL,
    SENT_DATE       DATE             NOT NULL,
    STATUS          INTEGER,
    FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES (COURSE_ID),
    FOREIGN KEY (PAYMENT_ID) REFERENCES PAYMENTS (PAYMENT_ID)
);



